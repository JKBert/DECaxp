/*
 * The VA2PA function does not take all the following into consideration.
 */
In PALmode:
  1) Istream memory mapping is disabled
  2) Dstream memory mapping is still enabled
  3) Interrupts are disabled

/*
 * The Bcache needs to maintain dirty/shared bits.  Modified bits are not required because the Bcache writes through to memory.
 */

/*
 * Need to consider re-order traps in both the Ibox and Mbox.  See sections HRM 4.6
 */

/*
 * We should consider splitting the Mbox code into Load Memory, Load I/O, Store memory, and Store I/O functions.  We'll also
 * need to have functions to process interface calls from the Cbox and the Ebox/Ibox.
 */

/*
 * Interfaces:
 *	Ibox -> Ibox (ITB miss)
 *	Ibox -> Ebox (integer instructions and IPRs)
 *	Ibox -> Fbox (floating point instructions and IPRs)
 *	Ibox -> Cbox (IPRs, CSRs, MAF)
 *	Ibox -> Mbox (IPRs)
 *
 *	Ebox -> Mbox (LQ, SQ)
 *	Ebox -> Fbox (Integer -> FP)
 *	Ebox -> Ibox (instrction ready to retire)
 *
 *	Fbox -> Mbox (LQ, SQ)
 *	Fbox -> Ebox (FP -> Integer)
 *	Fbox -> Ibox (instruction ready to retire)
 *
 *	Mbox -> Ebox (LQ, SQ complete)
 *	Mbox -> Fbox (LQ, SQ complete)
 *	Mbox -> Ibox (DTB miss)
 *	Mbox -> Cbox (MAF, VDB, IOWB)
 *
 *	Cbox -> Ibox (Icache fill)
 *	Cbox -> Mbox (Dcache fill, update Dcache bits)
 *	Cbox -> System (PQ rsp, Command rq)
 *
 *	System -> Cbox (PQ, IRQ)
 */

/*
 * This procedure gets called under the following conditions:
 *		1) An entry was stored into the LQ from the Ebox or Fbox
 *		2) A Dcache block has been stored in the Dcache by the Cbox - may be able to complete more than one LQ entry
 *		3) An MAF entry for RdBytes, RdLWs, or RdQWs has just been completed by the Cbox
 */
Load Instructions:
  1) If this is a new instruction
    A) Translate VA to PA
    B) Store the following into LQ:
      I) PA
      II) Destination Register
      III) data format
      IV) IOflag true when PA[43]=1, otherwise false.
    C) If IOflag=false
      I) Probe Dcache at VA for Dcache block status (DcHit and/or DcW)
      II) If 1.C.I) did not set DcHit
        a) Probe Bcache at PA for Bcache block status (BcHit and/or BcW)
        b) If 1.C.II.a) did not set BcHit
          i) If there is an older store to this same address in the SQ
            set source to the particular SQ
            set complete to true
          ii) Else
            1) set queueCommand to true
            2) If block needs to be evicted
              a) If block is not locked
                i) If modify bit set
                  1) send block to Bcache
                  2) update block with new physical tag and state (pending cache fill)
              b) Else
                i) set block to indicate that eviction is pending
                ii) set complete to false
                iii) set queueCommand to false
            3) If queueCommand=true
              a) Queue RdBlk Command to MAF to fill Dcache (and Bcache) block
            4) set complete to false
        c) Else
          i) Fetch Bcache block and store in Dcache
          ii) Set Dcache bits appropriately
          iii) set complete to true
      IV) Else
        set complete to true
    D) Else
      I) Queue RdBytes, RdLWs, or RdQWs, based on size, to MAF
      II set complete to false
  2) Else
    set complete to true
  3) If complete=true
    A) For each LQ entry
      I) If (IOflag=false and Dcache block status is DcHit and/or DcW) or
          (IOflag=false and can be sourced from SQ) or
          (IOflag=true and PA matches)
        i) Remove entry from LQ
        ii) Format data (from Dcache or SQ) for appropriate destination register (integer/floating point)
        iii) Mark instruction ready to retire
  4) return back to caller

/************************************************************************************************
 * Need to determine when a block is unlocked so that any pending stores/loads can be completed *
 ************************************************************************************************/
Store Instructions:
  1) If this is a new instruction
    A) Translate VA to PA
    B) Store the following into SQ:
      I) PA
      II) Destination Register
      III) data format
      IV) IOflag true when PA[43]=1, otherwise false.
    C) If IOflag=false
      I) Probe Dcache at VA for Dcache block status (DcHit and/or DcW)
      II) Store results of Dcache probe in SQ
      III) If I) did not set DcHit
        a) If instructions is an STx_C
          i) set a failure condition for the STx_C instruction
          ii) set complete to true
        b) Else
          i) Probe Bcache at PA for Bcache block status (BcHit and/or BcW)
          ii) If a) did not set BcHit
            1) set queueCommand to true
            2) If block needs to be evicted
              a) If block is not locked
                i) If modify bit set
                  1) send block to Bcache
                  2) update block with new physical tag and state (pending cache fill)
              b) Else
                i) set block to indicate that eviction is pending
                ii) set complete to false
                iii) set queueCommand to false
            3) If queueCommand=true
              a) Queue RdBlkMod Command to MAF
          iii) Else
            1) Fetch Bcache block and store in Dcache
            2) Set Dcache bits appropriately (DcHit=BcHit; DcW=BcW)
      IV) If 1.C.I or 1.C.III.b.iii set DcHit and complete=false
        a) If 1.C.I or 1.C.III.b.iii did not set DcW
          1) Set Dirty Flow (Internally acknowledged, or Queue ShareToDirty, CleanToDirty, or STCChangeToDirty to MAF)
          2) set complete to false
        b) Else
          1) Set complete to true
      V) Else
        set complete to false
    D) Else
      I) Queue WrBytes, WrLWs, WrQWs, based on size, to IOWB
      II) set complete to true
  2) Else
    A) set complete to true
  3) If complete=true
    A) For each SQ entry
      I) If (IOflag=false and Dcache block status is DcHit and/or DcW) or
          (IOflag=true and PA matches and next store in program order)
        i) Remove entry from SQ
        ii) Mark instruction ready to retire
        /*************************************************************************************
         * When IQ actually retires if the instruction is to memory, the data from the store *
         * is copied into the Dcache.  The Mbox replays I/O SQ entries in program order.     *
         *************************************************************************************/

Functions Needed:
  01) Dcache probe, returning DcHit and/or DcW
  02) Bcache probe, returning BcHit and/or BcW
  03) LQ/SQ compare, returning +1 or -1 to indicate when the first instruction is newer or older then the second
  04) Copy Bcache block into Dcache
  05) Copy Memory block into Dcache, mark block state appropriately (modified bit set), and wake up Mbox (called from Cbox)
  06) Evict block (check that the block can be evicted - not locked)
  07) Store value in Dcache when store instruction is retired (by Ibox) - may trigger queueCommand
  08) When block to be evicted is no longer locked, Send command to Cbox
  09) IO Store sent to Cbox in program order
  10) Wake up Ibox (when a LDx or STx entry can be retired)
